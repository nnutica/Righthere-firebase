using System;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace Firebasemauiapp.Services;

public class API
{
    private string emotion;
    private string suggestion;
    private string emotionalReflection;
    private string mood;
    private string keywords;
    private string score;

    public async Task SendData(string Diary)
    {
        using HttpClient client = new HttpClient();
        
        // ‡∏•‡∏¥‡∏™‡∏ï‡πå URL ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        var urls = new[]
        {
            "http://192.168.1.107:8000/getadvice", // IP ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á
            "http://10.0.2.2:8000/getadvice",      // Android Emulator
            "http://localhost:8000/getadvice",      // Local development
            "http://127.0.0.1:8000/getadvice"      // Localhost IP
        };

        var data = new { text = Diary }; // API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ key "text"
        string jsonData = JsonSerializer.Serialize(data);
        HttpContent content = new StringContent(jsonData, Encoding.UTF8, "application/json");

        Exception lastException = null;

        // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö URL ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        foreach (string url in urls)
        {
            try
            {
                Console.WriteLine($"üöÄ Trying URL: {url}");
                
                HttpResponseMessage response = await client.PostAsync(url, content);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();

                if (responseBody == null)
                {
                    throw new Exception("Failed to parse API response");
                }

                if (!responseBody.Contains("emotion") || !responseBody.Contains("advice"))
                {
                    throw new Exception("API response missing required fields (emotion, advice)");
                }

                // ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô Dictionary
                var responseData = JsonSerializer.Deserialize<Dictionary<string, string>>(responseBody);

                // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
                emotion = responseData["emotion"] ?? "";
                string adviceRaw = responseData["advice"] ?? "";

                // ‡πÉ‡∏ä‡πâ Regex ‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å adviceRaw
                suggestion = ExtractValue(adviceRaw, "Suggestion");
                emotionalReflection = ExtractValue(adviceRaw, "Emotional Reflection");
                mood = ExtractValue(adviceRaw, "Mood");
                keywords = ExtractValue(adviceRaw, "Keywords");
                score = ExtractValue(adviceRaw, "Score");

                // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                Console.WriteLine($"‚úÖ Success with URL: {url}");
                Console.WriteLine($"Emotion: {emotion}");
                Console.WriteLine($"Suggestion: {suggestion}");
                Console.WriteLine($"Emotional Reflection: {emotionalReflection}");
                Console.WriteLine($"Mood: {mood}");
                Console.WriteLine($"Keywords: {keywords}");
                Console.WriteLine($"Score: {score}");
                
                return; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å method
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Failed with {url}: {ex.Message}");
                lastException = ex;
                continue; // ‡∏•‡∏≠‡∏á URL ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å URL ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        throw new Exception($"Connection failure - all URLs failed. Last error: {lastException?.Message}");
    }

    private string ExtractValue(string text, string label)
    {
        var match = Regex.Match(text, $@"- {label}:\s*(.+?)(?:\s*-|$)");
        return match.Success ? match.Groups[1].Value.Trim() : "N/A";
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Getter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
    public string GetEmotion() => emotion;
    public string GetSuggestion() => suggestion;
    public string GetEmotionalReflection() => emotionalReflection;
    public string GetMood() => mood;
    public string GetKeywords() => keywords;
    public double GetScore() => double.TryParse(score, out var result) ? result : 5.0;

    public static async Task Main(string data)
    {
        API api = new API();
        await api.SendData(data);

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Getter
        Console.WriteLine("\n--- Results ---");
        Console.WriteLine("Emotion: " + api.GetEmotion());
        Console.WriteLine("Suggestion: " + api.GetSuggestion());
        Console.WriteLine("Emotional Reflection: " + api.GetEmotionalReflection());
        Console.WriteLine("Mood: " + api.GetMood());
        Console.WriteLine("Keywords: " + api.GetKeywords());
        Console.WriteLine("Score: " + api.GetScore());
    }
}
