using CommunityToolkit.Maui.Views;
using Firebase.Auth;
using Firebasemauiapp.Data;
using Firebasemauiapp.Model;

namespace Firebasemauiapp.CommunityPage;

public partial class CommunityCreatePost : Popup
{
	private readonly PostDatabase _postDb;
	private readonly FirebaseAuthClient _auth;
	private readonly string _userName;

	public CommunityCreatePost()
	{
		InitializeComponent();

		var services = Application.Current?.Handler?.MauiContext?.Services;
		_postDb = services?.GetService(typeof(PostDatabase)) as PostDatabase ?? throw new InvalidOperationException("PostDatabase service not available");
		_auth = services?.GetService(typeof(FirebaseAuthClient)) as FirebaseAuthClient ?? throw new InvalidOperationException("FirebaseAuthClient service not available");

		_userName = _auth.User?.Info?.Email ?? _auth.User?.Info?.DisplayName ?? "Guest";
		UserLabel.Text = $"Posting as: {_userName}";
	}

	public CommunityCreatePost(string userName, PostDatabase postDb, FirebaseAuthClient auth)
	{
		InitializeComponent();
		_userName = userName;
		_postDb = postDb;
		_auth = auth;
		UserLabel.Text = $"Posting as: {userName}";
	}

	private void OnCloseClicked(object sender, EventArgs e)
	{
		CloseAsync();
	}

	private void OnCancelClicked(object sender, EventArgs e)
	{
		CloseAsync();
	}

	private async void OnPostClicked(object sender, EventArgs e)
	{
		var content = PostContentEditor.Text;
		if (!string.IsNullOrWhiteSpace(content))
		{
			await CreatePostAsync(content);
			PostContentEditor.Text = string.Empty;
			await CloseAsync();
		}
		else
		{
			// Show validation message
			await DisplayAlert("Validation", "Please enter some content for your post.", "OK");
		}
	}

	private async Task DisplayAlert(string title, string message, string cancel)
	{
		if (Shell.Current != null)
		{
			await Shell.Current.DisplayAlert(title, message, cancel);
		}
	}

	private async Task CreatePostAsync(string content)
	{
		try
		{
			var author = _auth.User?.Info?.DisplayName ?? _userName;
			var newPost = new PostData
			{
				Content = content,
				Author = string.IsNullOrWhiteSpace(author) ? "Anonymous" : author,
				Likes = 0,
				CreatedAt = DateTime.UtcNow
			};
			// Ensure PostId is generated by DB layer if not set
			await _postDb.CreatePostAsync(newPost);

			// Show success message
			await DisplayAlert("Success", "Your post has been created!", "OK");
		}
		catch (Exception ex)
		{
			await DisplayAlert("Error", $"Failed to create post: {ex.Message}", "OK");
		}
	}
}